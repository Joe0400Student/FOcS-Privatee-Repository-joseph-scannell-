from NFA import *
from string import printable
import random
from DFA import *

WHOLE_ASCII = printable



def generate_random_name() -> str: return ''.join(random.choices(WHOLE_ASCII,k=20))

class Regex:

    def __repr__(self):
        pass

    def compile(self):
        pass

    def __eq__(self, other):
        return compile(self.compile()) == compile(other.compile())

class RegexEpsilon(Regex):

    def __init__(self):
        pass
    def compile(self):
        n1, n2 = generate_random_name(), generate_random_name()
        return NFA(
            States=[n1,n2],
            Alphabet=WHOLE_ASCII,
            Start_State=n1,
            Transition_function={
                        n1:{a : [n1] for a in WHOLE_ASCII},
                        n2:{}
                      },
            Accepting_States={n1:True,n2:False}
        )
    
    def __repr__(self):
        return "epsilon"


class RegexEmpty(Regex):

    def __init__(self):
        pass
    
    def compile(self):
        n1 = generate_random_name()
        return NFA(
            States=[n1],
            Alphabet=WHOLE_ASCII,
            Start_State=n1,
            Transition_function={n1:{}},
            Accepting_States={n1:False},
        )
    def __repr__(self):
        return "Empty"

class RegexChar(Regex):
    def __init__(self,character):
        self.character = character
    
    def compile(self):
        n1, n2, n3 = generate_random_name(), generate_random_name(), generate_random_name()
        return NFA(
            States=[n1,n2,n3],
            Alphabet=WHOLE_ASCII,
            Start_State=n1,
            Transition_function={
                        n1:{a: [n2] if a == self.character else [n3] for a in WHOLE_ASCII},
                        n2:{a: [n3] for a in WHOLE_ASCII},
                        n3:{}
            },
            Accepting_States={n1:False,n2:True,n3:False}
        )
    def __repr__(self):
        return self.character

class RegexUnion(Regex):

    def __init__(self,a,b):
        self.a, self.b = a, b

    def compile(self):
        return self.a.compile() | self.b.compile()

    def __repr__(self):
        return f"({self.a.__repr__()})∪({self.b.__repr__()})"

class RegexStar(Regex):

    def __init__(self,a):
        self.a = a 
    
    def compile(self):
        return self.a.compile().kleene_star()

    def __repr__(self):
        return f"({self.a.__repr__()})*"

class RegexConcat(Regex):

    def __init__(self,a,b):
        self.a, self.b = a,b
    
    def compile(self):
        return self.a.compile() + self.b.compile()
    
    def __repr__(self):
        return f"({self.a.__repr__()})⚬({self.b.__repr__()})"

#regex_thing = RegexUnion(RegexConcat(RegexConcat(RegexChar(a),RegexChar(b)),RegexChar(c)),
 #               RegexConcat(RegexConcat(RegexChar(c),RegexChar(b)),RegexChar(a)))

def generate_alphabet_regex():
    current_Regex = RegexEpsilon()
    for c in string.ascii_letters:
        current_Regex = RegexUnion(current_Regex,RegexChar(c))
    return current_Regex


def PatternBuilder(string) -> Regex:
    string = string.__iter__()
    if((val := string.__next__()) == "("):
        return MakeConcat(string)
    elif(val == "|"):
        return MakeUnion(string)
    elif(val == "*"):
        return MakeStar(string)


def MakeUnion(string) -> Regex:
    current_regex = RegexEmpty()
    while((value := string.__next__()) != "]"):
        if(value == "("):
            current_regex = RegexUnion(
                MakeConcat(string),
                current_regex
            )
        elif(value == "|"):
            current_regex = RegexUnion(
                MakeUnion(string),
                current_regex
            )
        elif(value == "*"):
            current_regex = RegexUnion(
                MakeStar(string),
                current_regex
            )
        else:
            current_regex = RegexUnion(
                current_regex,
                RegexChar(value)
            )
    return current_regex


def MakeConcat(string) -> Regex:
    current_regex = RegexEpsilon()
    #print("called")
    while((value := string.__next__()) != "]"):
        if(value == "("):
            current_regex = RegexConcat(current_regex,MakeConcat(string))
        elif(value == "|"):
            current_regex = RegexConcat(current_regex,MakeUnion(string))
        elif(value == "*"):
            current_regex = RegexConcat(current_regex,MakeStar(string))
        else:
            #print("Here")
            current_regex = RegexConcat(current_regex,RegexChar(value))
    return current_regex
def MakeStar(string) -> Regex:
    if((value := string.__next__()) == "("):
        return RegexStar(MakeConcat(string))
    elif(value == "|"):
        return RegexStar(MakeUnion(string))
    elif(value == "*"):
        return RegexStar(MakeStar(string))


value = PatternBuilder("((|abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]*|abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]]@|abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]*|abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMnOPQRSTUVWXYZ].com]")
#value = PatternBuilder("((ab]c]")
print(str(value))
print(value.compile().compile().iterate_dfa("joe@gmail.com"))
